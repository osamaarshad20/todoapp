{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport reducer from './reducer';\nimport { fetchTodosData, fetchContactsData } from './actions';\nimport axios from 'axios';\n\nconst thunkMiddleware = require('redux-thunk').default; //fetching todos from server\n\n\nconst fetchTodos = () => {\n  return function (dispatch) {\n    axios.get('http://localhost:8000/todos').then(response => {\n      dispatch(fetchTodosData(response.data));\n    }).catch(error => {\n      console.log('Unable to fetch todos!');\n    });\n  };\n}; //fetching contacts from server\n\n\nconst fetchContacts = () => {\n  return function (dispatch) {\n    axios.get('http://localhost:8000/contacts').then(response => {\n      dispatch(fetchContactsData(response.data));\n    }).catch(error => {\n      console.log('Unable to fetch contacts!');\n    });\n  };\n};\n\nexport function LoginCall(email, password) {\n  axios.post('http://localhost:8000/auth/login', {\n    email: email,\n    password: password\n  }).then(response => {\n    dispatch(fetchContactsData(response.data.authorized));\n  }).catch(error => {});\n}\nconst store = createStore(reducer, applyMiddleware(thunkMiddleware));\nstore.dispatch(fetchTodos());\nstore.dispatch(fetchContacts());\nexport default store;","map":{"version":3,"sources":["/home/osamaarshad/Desktop/office-work/js_training/todo-app/src/redux/store.js"],"names":["createStore","applyMiddleware","reducer","fetchTodosData","fetchContactsData","axios","thunkMiddleware","require","default","fetchTodos","dispatch","get","then","response","data","catch","error","console","log","fetchContacts","LoginCall","email","password","post","authorized","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,cAAT,EAAyBC,iBAAzB,QAAkD,WAAlD;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,eAAe,GAAGC,OAAO,CAAC,aAAD,CAAP,CAAuBC,OAA/C,C,CAEA;;;AACA,MAAMC,UAAU,GAAG,MAAM;AACrB,SAAO,UAASC,QAAT,EAAkB;AACzBL,IAAAA,KAAK,CAACM,GAAN,CAAU,6BAAV,EACCC,IADD,CACMC,QAAQ,IAAG;AACbH,MAAAA,QAAQ,CAACP,cAAc,CAACU,QAAQ,CAACC,IAAV,CAAf,CAAR;AACH,KAHD,EAICC,KAJD,CAIOC,KAAK,IAAI;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACH,KAND;AAQC,GATD;AAUH,CAXD,C,CAaA;;;AACA,MAAMC,aAAa,GAAG,MAAM;AACxB,SAAO,UAAST,QAAT,EAAkB;AACzBL,IAAAA,KAAK,CAACM,GAAN,CAAU,gCAAV,EACCC,IADD,CACMC,QAAQ,IAAG;AACbH,MAAAA,QAAQ,CAACN,iBAAiB,CAACS,QAAQ,CAACC,IAAV,CAAlB,CAAR;AACH,KAHD,EAICC,KAJD,CAIOC,KAAK,IAAI;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACH,KAND;AAQC,GATD;AAUH,CAXD;;AAaA,OAAO,SAASE,SAAT,CAAmBC,KAAnB,EAA0BC,QAA1B,EAAmC;AACtCjB,EAAAA,KAAK,CAACkB,IAAN,CAAW,kCAAX,EACI;AACEF,IAAAA,KAAK,EAAEA,KADT;AAEEC,IAAAA,QAAQ,EAAEA;AAFZ,GADJ,EAIOV,IAJP,CAIYC,QAAQ,IAAG;AACfH,IAAAA,QAAQ,CAACN,iBAAiB,CAACS,QAAQ,CAACC,IAAT,CAAcU,UAAf,CAAlB,CAAR;AACH,GANL,EAOKT,KAPL,CAOWC,KAAK,IAAG,CAEd,CATL;AAUH;AAID,MAAMS,KAAK,GAAGzB,WAAW,CAACE,OAAD,EAAUD,eAAe,CAACK,eAAD,CAAzB,CAAzB;AACAmB,KAAK,CAACf,QAAN,CAAeD,UAAU,EAAzB;AACAgB,KAAK,CAACf,QAAN,CAAeS,aAAa,EAA5B;AAEA,eAAeM,KAAf","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\nimport reducer from './reducer';\nimport { fetchTodosData, fetchContactsData } from './actions'\nimport axios from 'axios';\n\nconst thunkMiddleware = require('redux-thunk').default\n\n//fetching todos from server\nconst fetchTodos = () => {\n    return function(dispatch){\n    axios.get('http://localhost:8000/todos')\n    .then(response =>{\n        dispatch(fetchTodosData(response.data))\n    })\n    .catch(error => {\n        console.log('Unable to fetch todos!')\n    })\n\n    }\n}\n\n//fetching contacts from server\nconst fetchContacts = () => {\n    return function(dispatch){\n    axios.get('http://localhost:8000/contacts')\n    .then(response =>{\n        dispatch(fetchContactsData(response.data))\n    })\n    .catch(error => {\n        console.log('Unable to fetch contacts!')\n    })\n\n    }\n}\n\nexport function LoginCall(email, password){\n    axios.post('http://localhost:8000/auth/login',\n        {\n          email: email,\n          password: password\n        }).then(response =>{\n            dispatch(fetchContactsData(response.data.authorized))\n        })\n        .catch(error =>{\n            \n        });\n}\n\n\n\nconst store = createStore(reducer, applyMiddleware(thunkMiddleware));\nstore.dispatch(fetchTodos())\nstore.dispatch(fetchContacts())\n\nexport default store;"]},"metadata":{},"sourceType":"module"}