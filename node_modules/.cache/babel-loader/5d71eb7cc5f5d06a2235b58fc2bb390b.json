{"ast":null,"code":"import * as actions from './actionTypes';\nlet TODO_ID = 0;\nvar initial_state = {\n  \"inputText\": \"\",\n  \"status\": \"all\",\n  \"authorized\": true,\n  \"todos\": [],\n  \"filteredTodos\": [],\n  \"contacts\": [{\n    \"id\": 1,\n    \"name\": \"contact-1\",\n    \"number\": \"+92 3-- 21-----\"\n  }]\n};\n\nconst filteredTodosHandler = () => {\n  switch (status) {\n    case 'completed':\n      initial_state = { ...initial_state,\n        filteredTodos: initial_state.todos.filter(todo => todo.complete === true)\n      };\n      setFilteredTodos(todos.filter(todo => todo.complete === true));\n      break;\n\n    case 'uncompleted':\n      initial_state = { ...initial_state,\n        filteredTodos: initial_state.todos.filter(todo => todo.complete === false)\n      };\n      break;\n\n    default:\n      initial_state = { ...initial_state,\n        filteredTodos: initial_state.todos\n      };\n      break;\n  }\n};\n\nexport default function reducer(state = initial_state, action) {\n  if (action.type === 'addTodos') {\n    return { ...state,\n      todos: [...state.todos, {\n        text: action.payload.text,\n        complete: false,\n        id: ++TODO_ID\n      }]\n    };\n  } else if (action.type === 'completeTodos') {\n    return { ...state,\n      todos: state.todos.map(item => {\n        if (item.id === action.payload.id) {\n          return { ...item,\n            complete: !item.complete\n          };\n        }\n\n        return item;\n      })\n    };\n  } else if (action.type === 'deleteTodo') {\n    return { ...state,\n      todos: state.todos.filter(item => item.id !== action.payload.id)\n    };\n  } else if (action.type === 'updateStatus') {\n    return { ...state,\n      status: action.payload.status\n    };\n  }\n\n  return state;\n}","map":{"version":3,"sources":["/home/osamaarshad/Desktop/office-work/js_training/todo-app/src/redux/reducer.js"],"names":["actions","TODO_ID","initial_state","filteredTodosHandler","status","filteredTodos","todos","filter","todo","complete","setFilteredTodos","reducer","state","action","type","text","payload","id","map","item"],"mappings":"AAAA,OAAO,KAAKA,OAAZ,MAAyB,eAAzB;AAEA,IAAIC,OAAO,GAAC,CAAZ;AAEA,IAAIC,aAAa,GAAG;AACJ,eAAa,EADT;AACa,YAAU,KADvB;AAC8B,gBAAc,IAD5C;AAEJ,WAAS,EAFL;AAGJ,mBAAiB,EAHb;AAGiB,cAAY,CAAC;AAAC,UAAK,CAAN;AAAS,YAAO,WAAhB;AAA6B,cAAU;AAAvC,GAAD;AAH7B,CAApB;;AAMA,MAAMC,oBAAoB,GAAG,MAAM;AAC3B,UAAOC,MAAP;AACA,SAAK,WAAL;AACOF,MAAAA,aAAa,GAAG,EACf,GAAGA,aADY;AAEfG,QAAAA,aAAa,EAAEH,aAAa,CAACI,KAAd,CAAoBC,MAApB,CAA4BC,IAAD,IAAUA,IAAI,CAACC,QAAL,KAAkB,IAAvD;AAFA,OAAhB;AAIHC,MAAAA,gBAAgB,CAACJ,KAAK,CAACC,MAAN,CAAcC,IAAD,IAAUA,IAAI,CAACC,QAAL,KAAkB,IAAzC,CAAD,CAAhB;AACA;;AACJ,SAAK,aAAL;AACIP,MAAAA,aAAa,GAAG,EACZ,GAAGA,aADS;AAEZG,QAAAA,aAAa,EAAEH,aAAa,CAACI,KAAd,CAAoBC,MAApB,CAA4BC,IAAD,IAAUA,IAAI,CAACC,QAAL,KAAkB,KAAvD;AAFH,OAAhB;AAIA;;AACJ;AACIP,MAAAA,aAAa,GAAG,EACZ,GAAGA,aADS;AAEZG,QAAAA,aAAa,EAAEH,aAAa,CAACI;AAFjB,OAAhB;AAIA;AAnBJ;AAsBH,CAvBL;;AAyBA,eAAe,SAASK,OAAT,CAAiBC,KAAK,GAAGV,aAAzB,EAAwCW,MAAxC,EAA+C;AAC1D,MAAGA,MAAM,CAACC,IAAP,KAAgB,UAAnB,EAA8B;AAC1B,WAAO,EACH,GAAGF,KADA;AAEHN,MAAAA,KAAK,EAAE,CAAC,GAAGM,KAAK,CAACN,KAAV,EAAiB;AAACS,QAAAA,IAAI,EAAEF,MAAM,CAACG,OAAP,CAAeD,IAAtB;AAA4BN,QAAAA,QAAQ,EAAE,KAAtC;AAA6CQ,QAAAA,EAAE,EAAE,EAAEhB;AAAnD,OAAjB;AAFJ,KAAP;AAIH,GALD,MAMK,IAAGY,MAAM,CAACC,IAAP,KAAgB,eAAnB,EAAmC;AACpC,WAAO,EACC,GAAGF,KADJ;AAECN,MAAAA,KAAK,EAAEM,KAAK,CAACN,KAAN,CAAYY,GAAZ,CAAiBC,IAAD,IAAU;AACjC,YAAIA,IAAI,CAACF,EAAL,KAAYJ,MAAM,CAACG,OAAP,CAAeC,EAA/B,EACA;AACI,iBAAO,EACP,GAAGE,IADI;AACEV,YAAAA,QAAQ,EAAE,CAACU,IAAI,CAACV;AADlB,WAAP;AAIH;;AACD,eAAOU,IAAP;AACH,OATU;AAFR,KAAP;AAaH,GAdI,MAeA,IAAIN,MAAM,CAACC,IAAP,KAAgB,YAApB,EAAiC;AAClC,WAAO,EACP,GAAGF,KADI;AAEPN,MAAAA,KAAK,EAAEM,KAAK,CAACN,KAAN,CAAYC,MAAZ,CAAmBY,IAAI,IAAIA,IAAI,CAACF,EAAL,KAAYJ,MAAM,CAACG,OAAP,CAAeC,EAAtD;AAFA,KAAP;AAIH,GALI,MAMA,IAAIJ,MAAM,CAACC,IAAP,KAAgB,cAApB,EAAmC;AACpC,WAAO,EACP,GAAGF,KADI;AAEPR,MAAAA,MAAM,EAAES,MAAM,CAACG,OAAP,CAAeZ;AAFhB,KAAP;AAIH;;AACD,SAAOQ,KAAP;AACH","sourcesContent":["import * as actions from './actionTypes'\n\nlet TODO_ID=0\n\nvar initial_state = {\n                \"inputText\": \"\", \"status\": \"all\", \"authorized\": true,\n                \"todos\": [],\n                \"filteredTodos\": [], \"contacts\": [{\"id\":1, \"name\":\"contact-1\", \"number\": \"+92 3-- 21-----\"}]\n}\n\nconst filteredTodosHandler = () => {\n        switch(status){\n        case 'completed':\n               initial_state = {\n                ...initial_state,\n                filteredTodos: initial_state.todos.filter((todo) => todo.complete === true)\n                }\n            setFilteredTodos(todos.filter((todo) => todo.complete === true));\n            break;\n        case 'uncompleted':\n            initial_state = {\n                ...initial_state,\n                filteredTodos: initial_state.todos.filter((todo) => todo.complete === false)\n                }\n            break;\n        default:\n            initial_state = {\n                ...initial_state,\n                filteredTodos: initial_state.todos\n                }\n            break;\n        }\n\n    }\n\nexport default function reducer(state = initial_state, action){\n    if(action.type === 'addTodos'){\n        return {\n            ...state,\n            todos: [...state.todos, {text: action.payload.text, complete: false, id: ++TODO_ID}]\n        };\n    }\n    else if(action.type === 'completeTodos'){\n        return {\n                ...state,\n                todos: state.todos.map((item) => {\n                if (item.id === action.payload.id)\n                {\n                    return {\n                    ...item, complete: !item.complete,\n                    };\n\n                }\n                return item;\n            })\n            };\n    }\n    else if (action.type === 'deleteTodo'){\n        return {\n        ...state,\n        todos: state.todos.filter(item => item.id !== action.payload.id)\n        };\n    }\n    else if (action.type === 'updateStatus'){\n        return {\n        ...state,\n        status: action.payload.status\n        };\n    }\n    return state;\n}\n"]},"metadata":{},"sourceType":"module"}