{"ast":null,"code":"import axios from 'axios';\nimport { useDispatch } from 'react-redux';\nlet TODO_ID = 0;\nconst dispatch = useDispatch();\nvar initial_state = {\n  \"authorized\": false,\n  \"todos\": [],\n  \"contacts\": []\n};\n\nconst fetchTodos = () => {\n  return function (dispatch) {\n    axios.get('http://localhost:8000/todos').then(response => {\n      initial_state = { ...initial_state,\n        todos: response.data\n      };\n    }).catch(error => {\n      console.log('Unable to fetch todos!');\n    });\n  };\n};\n\ndispatch(fetchTodos);\nexport default function reducer(state = initial_state, action) {\n  if (action.type === 'fetchTodoData') {\n    return { ...state,\n      todos: response.data\n    };\n  }\n\n  if (action.type === 'addTodos') {\n    return { ...state,\n      todos: [...state.todos, {\n        text: action.payload.text,\n        complete: false,\n        id: ++TODO_ID\n      }]\n    };\n  } else if (action.type === 'completeTodos') {\n    return { ...state,\n      todos: state.todos.map(item => {\n        if (item.id === action.payload.id) {\n          return { ...item,\n            complete: !item.complete\n          };\n        }\n\n        return item;\n      })\n    };\n  } else if (action.type === 'deleteTodo') {\n    return { ...state,\n      todos: state.todos.filter(item => item.id !== action.payload.id)\n    };\n  }\n\n  return state;\n}","map":{"version":3,"sources":["/home/osamaarshad/Desktop/office-work/js_training/todo-app/src/redux/reducer.js"],"names":["axios","useDispatch","TODO_ID","dispatch","initial_state","fetchTodos","get","then","response","todos","data","catch","error","console","log","reducer","state","action","type","text","payload","complete","id","map","item","filter"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,IAAIC,OAAO,GAAC,CAAZ;AAEA,MAAMC,QAAQ,GAAGF,WAAW,EAA5B;AAEA,IAAIG,aAAa,GAAG;AACA,gBAAc,KADd;AAEA,WAAS,EAFT;AAGA,cAAY;AAHZ,CAApB;;AAMA,MAAMC,UAAU,GAAG,MAAM;AACrB,SAAO,UAASF,QAAT,EAAkB;AACzBH,IAAAA,KAAK,CAACM,GAAN,CAAU,6BAAV,EACCC,IADD,CACMC,QAAQ,IAAG;AACjBJ,MAAAA,aAAa,GAAG,EACR,GAAGA,aADK;AAERK,QAAAA,KAAK,EAAED,QAAQ,CAACE;AAFR,OAAhB;AAIC,KAND,EAOCC,KAPD,CAOOC,KAAK,IAAI;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACH,KATD;AAWC,GAZD;AAaH,CAdD;;AAgBAX,QAAQ,CAACE,UAAD,CAAR;AAEA,eAAe,SAASU,OAAT,CAAiBC,KAAK,GAAGZ,aAAzB,EAAwCa,MAAxC,EAA+C;AAE1D,MAAGA,MAAM,CAACC,IAAP,KAAgB,eAAnB,EAAmC;AAC/B,WAAO,EACH,GAAGF,KADA;AAEHP,MAAAA,KAAK,EAAED,QAAQ,CAACE;AAFb,KAAP;AAIH;;AACD,MAAGO,MAAM,CAACC,IAAP,KAAgB,UAAnB,EAA8B;AAC1B,WAAO,EACH,GAAGF,KADA;AAEHP,MAAAA,KAAK,EAAE,CAAC,GAAGO,KAAK,CAACP,KAAV,EAAiB;AAACU,QAAAA,IAAI,EAAEF,MAAM,CAACG,OAAP,CAAeD,IAAtB;AAA4BE,QAAAA,QAAQ,EAAE,KAAtC;AAA6CC,QAAAA,EAAE,EAAE,EAAEpB;AAAnD,OAAjB;AAFJ,KAAP;AAIH,GALD,MAMK,IAAGe,MAAM,CAACC,IAAP,KAAgB,eAAnB,EAAmC;AACpC,WAAO,EACC,GAAGF,KADJ;AAECP,MAAAA,KAAK,EAAEO,KAAK,CAACP,KAAN,CAAYc,GAAZ,CAAiBC,IAAD,IAAU;AACjC,YAAIA,IAAI,CAACF,EAAL,KAAYL,MAAM,CAACG,OAAP,CAAeE,EAA/B,EACA;AACI,iBAAO,EACP,GAAGE,IADI;AACEH,YAAAA,QAAQ,EAAE,CAACG,IAAI,CAACH;AADlB,WAAP;AAIH;;AACD,eAAOG,IAAP;AACH,OATU;AAFR,KAAP;AAaH,GAdI,MAeA,IAAIP,MAAM,CAACC,IAAP,KAAgB,YAApB,EAAiC;AAClC,WAAO,EACP,GAAGF,KADI;AAEPP,MAAAA,KAAK,EAAEO,KAAK,CAACP,KAAN,CAAYgB,MAAZ,CAAmBD,IAAI,IAAIA,IAAI,CAACF,EAAL,KAAYL,MAAM,CAACG,OAAP,CAAeE,EAAtD;AAFA,KAAP;AAIH;;AACD,SAAON,KAAP;AACH","sourcesContent":["import axios from 'axios';\nimport { useDispatch } from 'react-redux'\n\nlet TODO_ID=0;\n\nconst dispatch = useDispatch();\n\nvar initial_state = {\n                    \"authorized\": false,\n                    \"todos\": [],\n                    \"contacts\": []\n}\n\nconst fetchTodos = () => {\n    return function(dispatch){\n    axios.get('http://localhost:8000/todos')\n    .then(response =>{\n    initial_state = {\n            ...initial_state,\n            todos: response.data\n        };\n    })\n    .catch(error => {\n        console.log('Unable to fetch todos!')\n    })\n\n    }\n}\n\ndispatch(fetchTodos)\n\nexport default function reducer(state = initial_state, action){\n\n    if(action.type === 'fetchTodoData'){\n        return {\n            ...state,\n            todos: response.data\n        };\n    }\n    if(action.type === 'addTodos'){\n        return {\n            ...state,\n            todos: [...state.todos, {text: action.payload.text, complete: false, id: ++TODO_ID}]\n        };\n    }\n    else if(action.type === 'completeTodos'){\n        return {\n                ...state,\n                todos: state.todos.map((item) => {\n                if (item.id === action.payload.id)\n                {\n                    return {\n                    ...item, complete: !item.complete,\n                    };\n\n                }\n                return item;\n            })\n            };\n    }\n    else if (action.type === 'deleteTodo'){\n        return {\n        ...state,\n        todos: state.todos.filter(item => item.id !== action.payload.id)\n        };\n    }\n    return state;\n}\n"]},"metadata":{},"sourceType":"module"}